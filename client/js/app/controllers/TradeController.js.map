{"version":3,"sources":["../../app-es6/controllers/TradeController.js"],"names":["currentInstance","tradeController","Trade","TradeList","TradeListView","MessageView","Message","TradeService","DateHelper","Bind","TradeController","$","document","querySelector","bind","_dateInput","_quantityInput","_valueInput","_currentOrder","_service","_tradesList","_message","_init","event","preventDefault","trade","_buildTrade","save","then","addTrade","text","_resetForm","catch","reason","import","trades","forEach","error","column","reverse","sort","a","b","clear","message","list","setInterval","importTrades","Date","toDate","value","parseInt","parseFloat","focus"],"mappings":"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","file":"TradeController.js","sourcesContent":["import {Trade} from \"../models/Trade.js\";\nimport {TradeList} from \"../models/TradeList.js\";\nimport {TradeListView} from \"../views/TradeListView.js\";\nimport {MessageView} from \"../views/MessageView.js\";\nimport {Message} from \"../models/Message.js\";\nimport {TradeService} from \"../services/TradeService.js\";\nimport {DateHelper} from \"../helpers/DateHelper.js\";\nimport {Bind} from \"../helpers/Bind.js\";\n\nclass TradeController {\n\n    constructor() {\n        let $ = document.querySelector.bind(document);\n\n        this._dateInput = $(\"#date\");\n        this._quantityInput = $(\"#quantity\");\n        this._valueInput = $(\"#value\");\n        this._currentOrder = '';\n        this._service = new TradeService();\n\n        this._tradesList = new Bind(\n            new TradeList(),\n            new TradeListView($('#tradeListContainer')),\n            'addTrade', 'sort', 'reverse', 'clear');\n\n        this._message = new Bind(\n            new Message(),\n            new MessageView($('#messageContainer')),\n            'text');\n\n        this._init();\n    }\n\n    add(event) {\n        event.preventDefault();\n\n        let trade = this._buildTrade();\n        this._service\n            .save(trade)\n            .then(() => {\n                this._tradesList.addTrade(trade);\n                this._message.text = 'Trade successfully added.';\n                this._resetForm();\n            })\n            .catch(reason => this._message.text = reason);\n    }\n\n    importTrades() {\n        this._service\n            .import(this._tradesList.trades)\n            .then(trades => {\n                trades.forEach((trade) => this._tradesList.addTrade(trade));\n                this._message.text = 'Trades imported successfully.';\n            })\n            .catch(error => this._message.text = error);\n    }\n\n    order(column) {\n        if(this._currentOrder === column) {\n            return this._tradesList.reverse();\n        } else {\n            this._tradesList.sort((a, b) => a[column] - b[column]);\n        }\n        this._currentOrder = column;\n    }\n\n    clear() {\n        this._service\n            .clear()\n            .then(message => {\n                this._message.text = message;\n                this._tradesList.clear();\n            })\n            .catch(error => this._message.text = error);\n    }\n\n    _init() {\n        this._service\n            .list()\n            .then(trades => trades.forEach(trade => this._tradesList.addTrade(trade)))\n            .catch(error => this._message.text = error);\n\n        setInterval(() => {\n            this.importTrades();\n        }, 3000);\n    }\n\n    _buildTrade() {\n        return new Trade(\n            new Date(DateHelper.toDate(this._dateInput.value)),\n            parseInt(this._quantityInput.value),\n            parseFloat(this._valueInput.value));\n    }\n\n    _resetForm() {\n        // Clean Fields\n        this._dateInput.value = '';\n        this._quantityInput.value = 1;\n        this._valueInput.value = 0.0;\n\n        // Reset focus\n        this._dateInput.focus();\n    }\n}\n\nlet tradeController = new TradeController();\nexport function currentInstance() {\n    return tradeController;\n}\n"]}