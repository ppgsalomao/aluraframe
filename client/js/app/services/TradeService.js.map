{"version":3,"sources":["../../app-es6/services/TradeService.js"],"names":["HttpService","ConnectionFactory","TradeDAO","Trade","TradeService","_http","Promise","all","getWeekTrades","getPreviousWeekTrades","getWeekBeforePreviousWeekTrades","then","trades","reduce","result","concat","catch","Error","error","get","map","item","Date","data","quantidade","valor","console","log","reason","existentTrades","getTrades","filter","some","trade","equals","innerTrade","getConnection","connection","dao","save","list","deleteAll"],"mappings":"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","file":"TradeService.js","sourcesContent":["import {HttpService} from './HttpService.js';\nimport {ConnectionFactory} from \"./ConnectionFactory.js\";\nimport {TradeDAO} from \"../dao/TradeDAO.js\";\nimport {Trade} from \"../models/Trade.js\";\n\nexport class TradeService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    getTrades() {\n        return Promise.all([\n            this.getWeekTrades(),\n            this.getPreviousWeekTrades(),\n            this.getWeekBeforePreviousWeekTrades()\n        ]).then(trades => {\n            return trades\n                .reduce((result, trades) => result.concat(trades), []);\n        }).catch(error => {\n            throw new Error(error);\n        });\n    }\n\n    getWeekTrades() {\n        return this._http.get('negociacoes/semana')\n                .then(result => {\n                    return result.map((item) => new Trade(new Date(item.data), item.quantidade, item.valor));\n                })\n                .catch(reason => {\n                    console.log(reason);\n                    throw new Error('Error while trying to get week before previous week trades.');\n                });\n    }\n\n    getPreviousWeekTrades() {\n        return this._http.get('negociacoes/anterior')\n                .then(result => {\n                    return result.map((item) => new Trade(new Date(item.data), item.quantidade, item.valor));\n                })\n                .catch(reason => {\n                    console.log(reason);\n                    throw new Error('Error while trying to get week before previous week trades.');\n                });\n    }\n\n    getWeekBeforePreviousWeekTrades() {\n        return this._http.get('negociacoes/retrasada')\n                .then(result => {\n                    return result.map((item) => new Trade(new Date(item.data), item.quantidade, item.valor));\n                })\n                .catch(reason => {\n                    console.log(reason);\n                    throw new Error('Error while trying to get week before previous week trades.');\n                });\n    }\n\n    import(existentTrades) {\n        return this.getTrades()\n            .then(trades => trades.filter(trade =>\n                !existentTrades.some(innerTrade => trade.equals(innerTrade))))\n            .catch(reason => {\n                console.log(reason);\n                throw new Error('Unexpected error while trying to import all Trades.');\n            });\n    }\n\n    save(trade) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new TradeDAO(connection))\n            .then(dao => dao.save(trade))\n            .then(() => 'Trade saved successfully.')\n            .catch(reason => {\n                throw new Error('Unexpected error while trying to save the Trade.');\n            });\n    }\n\n    list() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new TradeDAO(connection))\n            .then(dao => dao.list())\n            .catch(reason => {\n                console.log(reason);\n                throw new Error('Unexpected error while trying to list the Trade.');\n            });\n    }\n\n    clear() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new TradeDAO(connection))\n            .then(dao => dao.deleteAll())\n            .then(() => 'Trades deleted successfully.')\n            .catch(reason => {\n                console.log(reason);\n                throw new Error('Unexpected error while trying to delete all Trades.');\n            });\n    }\n}"]}