{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["database_stores","database_version","database_name","ConnectionFactory","Error","Promise","resolve","reject","connection","openRequest","window","indexedDB","open","onupgradeneeded","e","_recreateStores","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,2B,GAAkB,CAAC,QAAD,C;AAClBC,4B,GAAmB,C;AACnBC,yB,GAAgB,Y;;yCAITC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAGC,UAAH,EAAe;AACXF,wCAAQE,UAAR;AACA;AACH;;AAED,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,aAAtB,EAAqCD,gBAArC,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,UAAUC,CAAV,EAAa;AACvCX,kDAAkBY,eAAlB,CAAkCD,EAAEE,MAAF,CAASC,MAA3C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,UAAUJ,CAAV,EAAa;AACjCN,6CAAaM,EAAEE,MAAF,CAASC,MAAtB;AACAE,wCAAQX,WAAWW,KAAX,CAAiBC,IAAjB,CAAsBZ,UAAtB,CAAR;AACAA,2CAAWW,KAAX,GAAmB,YAAM;AACrB,0CAAM,IAAIf,KAAJ,CAAU,yCAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQQ,EAAEE,MAAF,CAASC,MAAjB;AACH,6BAPD;;AASAR,wCAAYY,OAAZ,GAAsB,UAAUP,CAAV,EAAa;AAC/BQ,wCAAQC,GAAR,CAAYT,EAAEE,MAAF,CAASQ,KAArB;AACAjB,uCAAOO,EAAEE,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAzBM,CAAP;AA0BH;;;sDAEwB;AACrB,4BAAGjB,UAAH,EAAe;AACXW;AACAX,yCAAa,IAAb;AACH;AACJ;;;oDAEsBA,U,EAAY;AAC/BR,wCAAgB0B,OAAhB,CAAwB,iBAAS;AAC7B,gCAAIlB,WAAWmB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CrB,2CAAWsB,iBAAX,CAA6BD,KAA7B;AACH;AACDrB,uCAAWuB,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH","file":"ConnectionFactory.js","sourcesContent":["const database_stores = ['trades'];\nconst database_version = 2;\nconst database_name = 'aluraframe';\nvar connection;\nvar close;\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error('It is not possible to create instances of ConnectionFactory.');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            if(connection) {\n                resolve(connection);\n                return;\n            }\n\n            var openRequest = window.indexedDB.open(database_name, database_version);\n\n            openRequest.onupgradeneeded = function (e) {\n                ConnectionFactory._recreateStores(e.target.result);\n            };\n\n            openRequest.onsuccess = function (e) {\n                connection = e.target.result;\n                close = connection.close.bind(connection);\n                connection.close = () => {\n                    throw new Error('You cannot close a connection directly.');\n                };\n                resolve(e.target.result);\n            };\n\n            openRequest.onerror = function (e) {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static closeConnection() {\n        if(connection) {\n            close();\n            connection = null;\n        }\n    }\n\n    static _recreateStores(connection) {\n        database_stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n}"]}